"""‰ΩøÁî®ÂÖçË¥πÂºÄÊ∫êÂ∫ìÂ∞ÜMarkdownËΩ¨Êç¢‰∏∫Word„ÄÅPDFÂíåHTML"""

import logging
import os
from pathlib import Path

# ÂØºÂÖ•ÂøÖË¶ÅÁöÑÂ∫ì
try:
    import markdown
    MARKDOWN_AVAILABLE = True
    print("‚úÖ markdownÂ∫ìÂØºÂÖ•ÊàêÂäü")
except ImportError as e:
    MARKDOWN_AVAILABLE = False
    print(f"‚ùå markdownÂ∫ìÂØºÂÖ•Â§±Ë¥•: {e}")

try:
    from docx import Document  # type: ignore
    DOCX_AVAILABLE = True
    print("‚úÖ python-docxÂ∫ìÂØºÂÖ•ÊàêÂäü")
except ImportError as e:
    DOCX_AVAILABLE = False
    print(f"‚ùå python-docxÂ∫ìÂØºÂÖ•Â§±Ë¥•: {e}")

try:
    import weasyprint  # type: ignore
    WEASYPRINT_AVAILABLE = True
    print("‚úÖ weasyprintÂ∫ìÂØºÂÖ•ÊàêÂäü")
    
    # ÂÖ≥Èó≠WeasyPrintÁöÑËØ¶ÁªÜÊó•Âøó
    logging.getLogger('weasyprint').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.document').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.css').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.html').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.text').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.layout').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.draw').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.fonts').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.progress').setLevel(logging.ERROR)
    logging.getLogger('weasyprint.utils').setLevel(logging.ERROR)
    
    # ÂÖ≥Èó≠ÂÖ∂‰ªñÂèØËÉΩ‰∫ßÁîüË∞ÉËØï‰ø°ÊÅØÁöÑÊó•Âøó
    logging.getLogger('fontTools').setLevel(logging.ERROR)
    logging.getLogger('fontTools.subset').setLevel(logging.ERROR)
    logging.getLogger('cffi').setLevel(logging.ERROR)
    
except ImportError as e:
    WEASYPRINT_AVAILABLE = False
    print(f"‚ùå weasyprintÂ∫ìÂØºÂÖ•Â§±Ë¥•: {e}")

try:
    import pdfkit  # type: ignore
    PDFKIT_AVAILABLE = True
    print("‚úÖ pdfkitÂ∫ìÂØºÂÖ•ÊàêÂäü")
except ImportError as e:
    PDFKIT_AVAILABLE = False
    print(f"‚ùå pdfkitÂ∫ìÂØºÂÖ•Â§±Ë¥•: {e}")


def print_installation_guide():
    """ÊâìÂç∞ÂÖçË¥πÂ∫ìÂÆâË£ÖÊåáÂçó"""
    print("\n=== ÂÖçË¥πÂ∫ìÂÆâË£ÖÊåáÂçó ===")
    print("‰ª•‰∏ãÈÉΩÊòØÂÖçË¥πÂºÄÊ∫êÂ∫ìÔºåÂèØ‰ª•Êõø‰ª£Spire.Doc:")
    print()
    print("1. markdown (ÂøÖÈúÄ):")
    print("   pip install markdown")
    print()
    print("2. python-docx (WordËΩ¨Êç¢):")
    print("   pip install python-docx")
    print()
    print("3. weasyprint (PDFËΩ¨Êç¢):")
    print("   pip install weasyprint")
    print("   Ê≥®ÊÑèÔºöWindows‰∏äÂèØËÉΩÈúÄË¶ÅÈ¢ùÂ§ñÈÖçÁΩÆ")
    print()
    print("4. pdfkit (PDFËΩ¨Êç¢Â§áÈÄâ):")
    print("   pip install pdfkit")
    print("   ÈúÄË¶ÅÂÆâË£Öwkhtmltopdf: https://wkhtmltopdf.org/downloads.html")
    print()
    print("5. Â¶ÇÊûúÈÉΩ‰∏çÂÆâË£ÖÔºåÂ∞Ü‰ΩøÁî®HTMLÂ§áÈÄâÊñπÊ°à")
    print("=====================================\n")


def get_html_template(html_body: str) -> str:
    """Ëé∑ÂèñHTMLÊ®°Êùø"""
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>È°æÈóÆÂàÜÊûêÊä•Âëä</title>
        <style>
            body {{
                font-family: "Microsoft YaHei", "SimSun", sans-serif;
                line-height: 1.6;
                margin: 2cm;
                color: #333;
            }}
            h1, h2, h3, h4, h5, h6 {{
                color: #2c3e50;
                margin-top: 1em;
                margin-bottom: 0.5em;
            }}
            h1 {{ font-size: 2.2em; border-bottom: 1px solid #eee; padding-bottom: 0.3em; }}
            h2 {{ font-size: 1.8em; }}
            h3 {{ font-size: 1.4em; }}
            h4 {{ font-size: 1.2em; }}
            p {{ margin-bottom: 1em; }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 1em;
            }}
            th, td {{
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }}
            th {{
                background-color: #f2f2f2;
                font-weight: bold;
            }}
            pre {{
                background-color: #f6f8fa;
                padding: 1em;
                border-radius: 3px;
                font-family: 'Courier New', monospace;
                font-size: 0.9em;
                margin-bottom: 1em;
            }}
            code {{
                font-family: 'Courier New', monospace;
                background-color: #f0f0f0;
                padding: 0.2em 0.4em;
                border-radius: 3px;
                font-size: 0.9em;
            }}
            blockquote {{
                border-left: 4px solid #ccc;
                padding-left: 1em;
                margin-left: 0;
                color: #555;
                font-style: italic;
                margin-bottom: 1em;
            }}
        </style>
    </head>
    <body>
        {html_body}
    </body>
    </html>
    """


def markdown_to_word_free(markdown_file: str, output_file: str) -> bool:
    """‰ΩøÁî®python-docxÂ∞ÜMarkdownËΩ¨Êç¢‰∏∫WordÊñáÊ°£"""
    if not DOCX_AVAILABLE or not MARKDOWN_AVAILABLE:
        print("‚ùå Áº∫Â∞ëÂøÖË¶ÅÁöÑÂ∫ì (python-docx Êàñ markdown)")
        return False
    
    try:
        # ËØªÂèñMarkdownÊñá‰ª∂
        with open(markdown_file, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        # ËΩ¨Êç¢‰∏∫HTMLÔºàÁî®‰∫éÂèÇËÄÉÔºå‰ΩÜËøôÈáåÊàë‰ª¨Áõ¥Êé•Â§ÑÁêÜMarkdownÊñáÊú¨Ôºâ
        # html_body = markdown.markdown(markdown_content, extensions=['extra', 'codehilite'])
        
        # ÂàõÂª∫WordÊñáÊ°£
        doc = Document()
        
        # ÁÆÄÂçïÁöÑÊñáÊú¨Â§ÑÁêÜ - Â∞ÜHTMLÊ†áÁ≠æËΩ¨Êç¢‰∏∫WordÊ†ºÂºè
        lines = markdown_content.split('\n')
        for line in lines:
            line = line.strip()
            if not line:
                doc.add_paragraph()
            elif line.startswith('# '):
                doc.add_heading(line[2:], level=1)
            elif line.startswith('## '):
                doc.add_heading(line[3:], level=2)
            elif line.startswith('### '):
                doc.add_heading(line[4:], level=3)
            elif line.startswith('- ') or line.startswith('* '):
                doc.add_paragraph(line[2:], style='List Bullet')
            elif line.startswith('1. '):
                doc.add_paragraph(line[3:], style='List Number')
            else:
                doc.add_paragraph(line)
        
        doc.save(output_file)
        print(f"‚úÖ MarkdownËΩ¨WordÊàêÂäü: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå MarkdownËΩ¨WordÂ§±Ë¥•: {e}")
        return False


def markdown_to_pdf_weasyprint(markdown_file: str, output_file: str) -> bool:
    """‰ΩøÁî®WeasyPrintÂ∞ÜMarkdownËΩ¨Êç¢‰∏∫PDF"""
    if not WEASYPRINT_AVAILABLE or not MARKDOWN_AVAILABLE:
        print("‚ùå Áº∫Â∞ëÂøÖË¶ÅÁöÑÂ∫ì (weasyprint Êàñ markdown)")
        return False
    
    try:
        with open(markdown_file, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        html_body = markdown.markdown(markdown_content, extensions=['extra', 'codehilite', 'tables'])
        full_html = get_html_template(html_body)
        
        # ‰ΩøÁî®WeasyPrintËΩ¨Êç¢ÔºåÊ∑ªÂä†Êõ¥Â§öÈÖçÁΩÆÈÄâÈ°π
        html_doc = weasyprint.HTML(string=full_html)
        css = weasyprint.CSS(string='''
            @page {
                size: A4;
                margin: 2cm;
            }
            body {
                font-family: "Microsoft YaHei", "SimSun", sans-serif;
                line-height: 1.6;
                color: #333;
            }
        ''')
        
        html_doc.write_pdf(output_file, stylesheets=[css])
        print(f"‚úÖ MarkdownËΩ¨PDFÊàêÂäü (WeasyPrint): {output_file}")
        return True
        
    except OSError as e:
        if "libgobject" in str(e) or "cannot load library" in str(e):
            print(f"‚ùå WeasyPrintÈÅáÂà∞GTK‰æùËµñÈóÆÈ¢ò: {e}")
            print("üí° ËØ∑Á°Æ‰øùÂ∑≤Ê≠£Á°ÆÂÆâË£ÖGTK3ÂíåÁõ∏ÂÖ≥‰æùËµñ")
            return False
        else:
            print(f"‚ùå WeasyPrintÁ≥ªÁªü‰æùËµñÈîôËØØ: {e}")
            return False
    except Exception as e:
        print(f"‚ùå WeasyPrintËΩ¨Êç¢Â§±Ë¥•: {e}")
        return False


def markdown_to_pdf_pdfkit(markdown_file: str, output_file: str) -> bool:
    """‰ΩøÁî®pdfkitÂ∞ÜMarkdownËΩ¨Êç¢‰∏∫PDF"""
    if not PDFKIT_AVAILABLE or not MARKDOWN_AVAILABLE:
        print("‚ùå Áº∫Â∞ëÂøÖË¶ÅÁöÑÂ∫ì (pdfkit Êàñ markdown)")
        return False
    
    try:
        with open(markdown_file, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        html_body = markdown.markdown(markdown_content, extensions=['extra', 'codehilite'])
        full_html = get_html_template(html_body)
        
        options = {
            'page-size': 'A4',
            'margin-top': '2cm',
            'margin-right': '2cm',
            'margin-bottom': '2cm',
            'margin-left': '2cm',
            'encoding': "UTF-8",
            'no-outline': None
        }
        
        pdfkit.from_string(full_html, output_file, options=options)
        print(f"‚úÖ MarkdownËΩ¨PDFÊàêÂäü (pdfkit): {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå pdfkitËΩ¨Êç¢Â§±Ë¥•: {e}")
        return False


def markdown_to_html_free(markdown_file: str, output_file: str) -> bool:
    """Â∞ÜMarkdownËΩ¨Êç¢‰∏∫HTMLÊñáÊ°£"""
    if not MARKDOWN_AVAILABLE:
        print("‚ùå Áº∫Â∞ëmarkdownÂ∫ì")
        return False
    
    try:
        with open(markdown_file, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        html_body = markdown.markdown(markdown_content, extensions=['extra', 'codehilite'])
        full_html = get_html_template(html_body)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(full_html)
        
        print(f"‚úÖ MarkdownËΩ¨HTMLÊàêÂäü: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå MarkdownËΩ¨HTMLÂ§±Ë¥•: {e}")
        return False


def test_free_conversion():
    """ÊµãËØïÂÖçË¥πÂ∫ìËΩ¨Êç¢ÂäüËÉΩ"""
    
    if not MARKDOWN_AVAILABLE:
        print_installation_guide()
        return
    
    # Ê£ÄÊü•ÂèØÁî®ÁöÑËΩ¨Êç¢Â∫ì
    available_conversions = []
    if DOCX_AVAILABLE:
        available_conversions.append("Word")
    if WEASYPRINT_AVAILABLE or PDFKIT_AVAILABLE:
        available_conversions.append("PDF")
    available_conversions.append("HTML")
    
    print(f"‚úÖ ÂèØÁî®ÁöÑËΩ¨Êç¢Ê†ºÂºè: {', '.join(available_conversions)}")
    
    # ÊµãËØïÊñá‰ª∂ÂàóË°®
    test_files = [
        "consultant_analysis_output/2025-10-10/Êô∫Êµ©_È°æÈóÆÂàÜÊûêÊä•Âëä_2025-10-10_20251010_184425.md",
        "consultant_analysis_output/2025-10-10/ÊÄùÊÄ°_È°æÈóÆÂàÜÊûêÊä•Âëä_2025-10-10_20251010_184529.md", 
        "consultant_analysis_output/2025-10-10/‰Ω≥ÊÖß_È°æÈóÆÂàÜÊûêÊä•Âëä_2025-10-10_20251010_184633.md"
    ]
    
    print("=== ÂºÄÂßãÊµãËØïÂÖçË¥πÂ∫ìËΩ¨Êç¢ÂäüËÉΩ ===")
    
    # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
    output_dir = Path("free_output")
    output_dir.mkdir(exist_ok=True)
    
    for md_file in test_files:
        if not os.path.exists(md_file):
            print(f"‚ùå Êñá‰ª∂‰∏çÂ≠òÂú®: {md_file}")
            continue
            
        print(f"\nüìÑ Ê≠£Âú®ËΩ¨Êç¢: {md_file}")
        
        # Ëé∑ÂèñÊñá‰ª∂ÂêçÔºà‰∏çÂê´Êâ©Â±ïÂêçÔºâ
        file_name = Path(md_file).stem
        
        # ËΩ¨Êç¢Âà∞Word
        if DOCX_AVAILABLE:
            word_file = output_dir / f"{file_name}.docx"
            markdown_to_word_free(md_file, str(word_file))
        
        # ËΩ¨Êç¢Âà∞PDF
        if WEASYPRINT_AVAILABLE:
            pdf_file = output_dir / f"{file_name}_weasyprint.pdf"
            if not markdown_to_pdf_weasyprint(md_file, str(pdf_file)) and PDFKIT_AVAILABLE:
                pdf_file = output_dir / f"{file_name}_pdfkit.pdf"
                markdown_to_pdf_pdfkit(md_file, str(pdf_file))
        elif PDFKIT_AVAILABLE:
            pdf_file = output_dir / f"{file_name}.pdf"
            markdown_to_pdf_pdfkit(md_file, str(pdf_file))
        
        # ËΩ¨Êç¢Âà∞HTML
        html_file = output_dir / f"{file_name}.html"
        markdown_to_html_free(md_file, str(html_file))
    
    print("\n=== ÂÖçË¥πÂ∫ìËΩ¨Êç¢ÊµãËØïÂÆåÊàê ===")


if __name__ == "__main__":
    test_free_conversion()
